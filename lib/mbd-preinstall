#!/bin/sh -e

. `dirname $0`/mbd-common.sh
. "${MBD_REPCONFIGFILE}"

mbd_opt_init "Mini-buildd: Preinstall script for mini-dinstall."
mbd_opt_addPos "CHANGESFILE" "Full path to changes file."
mbd_opt_parse "$@"
mbdCheckUser mini-buildd

MBD_TMP_CF="`mbd_opt_getPos 0`"

mbdCheckFile "${MBD_TMP_CF}"

mbdParseCF "${MBD_TMP_CF}"

mbdShowQAChecks()
{
	local id="${1}"
	local url="http://${mbd_rephost}:${mbd_httpport}/~mini-buildd/log/${id}"

	echo "QA-Checks: ${url}"
	echo "----------------------------------------------------------------------"
	for s in ${MBD_HOME}/log/${id}/*.status; do
		local name=`basename "${s}" .status`
		local status=`cat "${s}"`
		echo "${status} (${name}): ${url}/${name}.log"
	done
	echo "----------------------------------------------------------------------"
	echo "Preinstall log: ${url}.log"
}


mbdQAPreliminary()
{
	${MBD_LIB}/mbd-qa-check -c "${MBD_TMP_CF}" -Q "Version New Orig UploadDSP" -I "${MBD_TMP_BUILDID}" -P "10_Preliminary"
}

mbdQAPrebuild()
{
	${MBD_LIB}/mbd-qa-check -a "${mbd_archall}" -r -c "${MBD_TMP_CF_BLD}" -Q "Lintian" -I "${MBD_TMP_BUILDID}" -P "20_Prebuild"
}

mbdBHBuild()
{
	${MBD_LIB}/mbd-qa-check -a "${mbdParseBH_arch}" -r -c "${MBD_TMP_CF_BLD}" -Q "Build" -I "${MBD_TMP_BUILDID}" -P "30_Build_${mbdParseBH_arch}"
}

mbdBHQAPostbuild()
{
	local cf="${MBD_HOME}/bld/builds/`mbdBId2BDir "${MBD_TMP_BUILDID}"`/${mbdParseCF_package}_${mbdParseBH_arch}.changes"
	# Only run this if we have a changes file on bld host
	if ssh -o StrictHostKeyChecking=no -p ${mbd_sshport} ${mbdParseBH_host} "test -f ${cf}"; then
		${MBD_LIB}/mbd-qa-check -a "${mbdParseBH_arch}" -r -c "${cf}" -Q "Lintian DownloadDBP" -I "${MBD_TMP_BUILDID}" -P "40_Postbuild_${mbdParseBH_arch}"
	else
		${MBD_LOG} -s "${MBD_TMP_LOGPRE}: ${mbdParseBH_arch}: No changes file (skipping postbuild checks)."
	fi
}

mbdBHClean()
{
	local bDir="bld/builds/`mbdBId2BDir "${MBD_TMP_BUILDID}"`"
	local info="${MBD_TMP_LOGPRE}: ${bDir}@${mbdParseBH_arch}"
	${MBD_LOG} -s "${info}: Cleaning..."
	ssh -o StrictHostKeyChecking=no -p ${mbd_sshport} ${mbdParseBH_host} "rm -rf ${bDir}"
	${MBD_LOG} -s "${info}: Cleaned."
}

# Run function on all build hosts in parallel.
mbdBHRun()
{
	local f="${1}"
	local pids=""
	local retval=0

	for arch in `echo "${mbd_archs}" | tr -d ","`; do
		mbdParseBH "${arch}"
		${f} &
		pids="${pids} $!"
	done

	local p
	for p in ${pids}; do
		if ! wait ${p}; then
			retval=1
		fi
	done
	return ${retval}
}


MBD_TMP_LOGPRE="${mbdParseCF_package}(${mbdParseCF_dist})"
# We propagate source-only uploads to builders, binary uploads are skipped
if [ "${mbdParseCF_arch}" = "source" ]; then
	MBD_TMP_BUILDID="${mbdParseCF_source}/${mbdParseCF_version}/`date --utc +%Y%m%d:%H%M%S:%N`"
	MBD_TMP_LOGDIR="${MBD_HOME}/log/${MBD_TMP_BUILDID}"
	mkdir -p "${MBD_TMP_LOGDIR}" || exit 10
	MBD_TMP_CF_BLD="${MBD_HOME}/bld/builds/`mbdBId2BDir "${MBD_TMP_BUILDID}"`/`basename "${MBD_TMP_CF}"`"

	${MBD_LOG} -s "${MBD_TMP_LOGPRE}: DSP upload. Build-ID is ${MBD_TMP_BUILDID}."

	(
		(mbdQAPreliminary)
		[ $? -eq 0 ] || exit 2  # REJECT

		(mbdQAPrebuild)
		[ $? -eq 0 ] || exit 2  # REJECT

		(mbdBHRun mbdBHBuild)
		[ $? -eq 0 ] || exit 1  # FTBFS

		(mbdBHRun mbdBHQAPostbuild)
		[ $? -eq 0 ] || exit 2  # REJECT

	) >"${MBD_TMP_LOGDIR}.log" 2>&1

	MBD_PREINSTALL_RETVAL=$?
	MBD_PREINSTALL_STATUS=`mbdRetval2Status PREINSTALL ${MBD_PREINSTALL_RETVAL}`
	echo "${MBD_PREINSTALL_STATUS}" >"${MBD_TMP_LOGDIR}.status"

  # Cleanup Build area on all build hosts. Always ignore retval; cosmetic only.
	mbdBHRun mbdBHClean >>"${MBD_TMP_LOGDIR}.log" 2>&1 || true

	(
		case ${MBD_PREINSTALL_STATUS} in
			BUILT)
				echo "I: Built and uploaded for all archs (${mbdParseCF_dist})."
				echo "----------------------------------------------------------------------"
				cat "${MBD_TMP_CF}"
				;;
			FTBFS)
				echo "W: Fails to build from source (retrying later). Please check failing build qa check."
				;;
			REJECT)
				echo "E: Mandatory QA-Check failed. Please check failing qa check."
				MBD_TMP_REJECTDIR="${MBD_TMP_LOGDIR}/REJECT"
				echo "I: Uploaded files moved to ${MBD_TMP_REJECTDIR}."
				mkdir "${MBD_TMP_REJECTDIR}"
				for f in ${mbdParseCF_files}; do
					mv "`dirname "${MBD_TMP_CF}"`/${f}" "${MBD_TMP_REJECTDIR}" || true
				done
				;;
			*)
				echo "E: Internal error detected. Please check preinstall log."
				;;
		esac
		echo "----------------------------------------------------------------------"
		mbdShowQAChecks "${MBD_TMP_BUILDID}"
	) | mail -s "${MBD_PREINSTALL_STATUS}(${mbdParseCF_dist}): ${mbdParseCF_package}" "${mbd_mail}"
	${MBD_LOG} -s "${MBD_TMP_LOGPRE}: ${MBD_PREINSTALL_STATUS}."
	exit ${MBD_PREINSTALL_RETVAL}
else
	if [ "${mbdParseCF_maintainer}" = "${MBD_AUTOBUILD_MAINTAINER}" ]; then
		${MBD_LOG} -s "${MBD_TMP_LOGPRE}: DBP upload ${mbdParseCF_arch}."
		exit 0
	else
		(
			echo "E: Direct binary upload (${mbdParseCF_maintainer} != ${MBD_AUTOBUILD_MAINTAINER})."
			echo "I: Only source-only uploads are accepted; use \"-S\" option for *-buildpackage."
			echo "I: Uploaded files purged."
			for f in ${mbdParseCF_files}; do
				rm "`dirname "${MBD_TMP_CF}"`/${f}" || true
			done
		) 2>&1 | mail -s "DISCARD: ${mbdParseCF_package} ${mbdParseCF_arch}" "${mbd_mail}"
		${MBD_LOG} -s "${MBD_TMP_LOGPRE}: DISCARD: Direct ${mbdParseCF_arch} DBP upload."
		exit 42
	fi
fi
