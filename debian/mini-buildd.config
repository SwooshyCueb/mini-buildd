#!/bin/bash -e

###########
# OLD -REP
###########

# @hack: Must be the same as in mbd-common.sh (we cannot include that so that pre-configuration is possible).
MBD_REPCONFIGFILE="/home/mini-buildd/.mini-buildd.conf"
MBD_REPCONFIGVARS="mbd_id mbd_rephost mbd_httpport mbd_sshport mbd_mail mbd_extdocurl mbd_dists mbd_archs mbd_apt_allow_unauthenticated mbd_archall"

. /usr/share/debconf/confmodule

SUPPORTED_DISTS="sarge, etch, lenny, squeeze, wheezy, sid"
SUPPORTED_ARCHS="i386, amd64, powerpc, arm, sparc, alpha, mips, mipsel, hppa, ia64, s390, m68k"

# @hack: Duplicate code in mini-buildd-rep.postinstall, please sync!
mbdDynConfVars()
{
	for arch in $(echo "${mbd_archs}" | tr -d ","); do
		echo -n "mbd_bldhost_${arch} "
		echo -n "mbd_deb_build_options_${arch} "
	done
	for dist in $(echo "${mbd_dists}" | tr -d ","); do
		for kind in base extra; do
			for arch in any $(echo "${mbd_archs}" | tr -d ","); do
				echo -n "mbd_src_$(echo ${dist} | tr "-" "_")_${kind}_${arch} "
			done
		done
	done
}

# Set on-the-fly defaults, where appropriate
mbdSetDefault()
{
	local key="${1}"
	local default="${2}"

	# Use given value, if we do not find anything else
	local value="${default}"

	if [ -n "${!key}" ]; then
		# Use run time variable
		value="${!key}"
	elif db_get mini-buildd-rep/${key} && [ -n "${RET}" ]; then
		# Use non-empty stored value
		value="${RET}"
	fi
	# Set in debconf and shell
	db_set mini-buildd-rep/${key} "${value}"
	eval "${key}=\"${value}\""
}

#
# Start processing
#

# Load config file, if it exists.
if [ -e "${MBD_REPCONFIGFILE}" ]; then
	. "${MBD_REPCONFIGFILE}" || true

	# Store values from config back to debconf
	for v in ${MBD_REPCONFIGVARS} $(mbdDynConfVars); do
		db_set mini-buildd-rep/${v} "${!v}" || true
	done
fi

# Easy questions
mbdSetDefault mbd_id "$(hostname)"
db_input high mini-buildd-rep/mbd_id || true

mbdSetDefault mbd_rephost "$(hostname -f)"
db_input medium mini-buildd-rep/mbd_rephost || true

mbdSetDefault mbd_httpport "80"
db_input low mini-buildd-rep/mbd_httpport || true

mbdSetDefault mbd_sshport "22"
db_input low mini-buildd-rep/mbd_sshport || true

mbdSetDefault mbd_mail "mini-buildd@$(hostname -f)"
db_input high mini-buildd-rep/mbd_mail || true

mbdSetDefault mbd_extdocurl ""
db_input medium mini-buildd-rep/mbd_extdocurl || true

# Dists && Archs: We need these values to compute further questions
mbdSetDefault mbd_dists "lenny"
db_subst mini-buildd-rep/mbd_dists DISTS "${SUPPORTED_DISTS}"
db_input high mini-buildd-rep/mbd_dists || true

mbdSetDefault mbd_archs "$(dpkg --print-architecture)"
db_subst mini-buildd-rep/mbd_archs ARCHS "${SUPPORTED_ARCHS}"
db_input high mini-buildd-rep/mbd_archs || true

# "Apt allow unauthenticated" toggle
mbdSetDefault mbd_apt_allow_unauthenticated false
db_input low mini-buildd-rep/mbd_apt_allow_unauthenticated || true
db_go || true

db_get mini-buildd-rep/mbd_dists || true
mbd_dists="${RET}"
db_get mini-buildd-rep/mbd_archs || true
mbd_archs="${RET}"

# What arch should compile arch=all packages?
mbdSetDefault mbd_archall "$(echo ${mbd_archs} | cut -d',' -f1)"
db_subst mini-buildd-rep/mbd_archall ARCHS "${mbd_archs}"
db_input high mini-buildd-rep/mbd_archall || true

# Configure sources lists (mbd_src_DIST_[base|extra]_ARCH)
for dist in $(echo "${mbd_dists}" | tr -d ","); do
	for kind in base extra; do
		for arch in any $(echo "${mbd_archs}" | tr -d ","); do
			KEY="mbd_src_$(echo ${dist} | tr "-" "_")_${kind}_${arch}"
			db_register mini-buildd-rep/mbd_source "mini-buildd-rep/${KEY}"
			db_subst "mini-buildd-rep/${KEY}" DIST "${dist}"
			db_subst "mini-buildd-rep/${KEY}" KIND "${kind}"
			db_subst "mini-buildd-rep/${KEY}" ARCH "${arch}"
			if [ "${kind}" = "base" ]; then
				db_subst "mini-buildd-rep/${KEY}" DESC "Create and maintain the base chroots"
			else
				db_subst "mini-buildd-rep/${KEY}" DESC "Build-time add-ons"
			fi
			# Ugly prio choser:
			# Base/any lists: high (this must be configured)
			# Extra/any lists: medium (usually not needed)
			# Arch-special lists: low (only needed in special cases)
			if [ "${kind}" = "base" -a "${arch}" = "any" ]; then
				PRIO="high"
				mbdSetDefault ${KEY} "ftp://ftp.debian.org/debian ${dist} main contrib non-free"
				db_subst "mini-buildd-rep/${KEY}" EXAMPLE "ftp://ftp.debian.org/debian ${dist} main contrib non-free"
			elif [ "${kind}" = "extra" -a "${arch}" = "any" ]; then
				PRIO="medium"
				db_subst "mini-buildd-rep/${KEY}" EXAMPLE "http://www.backports.org/debian ${dist}-backports main contrib non-free"
			else
				PRIO="low"
				db_subst "mini-buildd-rep/${KEY}" EXAMPLE "http://www.my-debian-${arch}-mirror/debian ${dist} main contrib non-free"
			fi
			db_input ${PRIO} "mini-buildd-rep/${KEY}" || true
		done
	done
done

# Configure build hosts (mbd_bldhost_ARCH)
for arch in $(echo "${mbd_archs}" | tr -d ","); do
	# Get build host
	KEY="mbd_bldhost_${arch}"
	db_register mini-buildd-rep/mbd_bldhost "mini-buildd-rep/${KEY}"
	db_subst "mini-buildd-rep/${KEY}" ARCH "${arch}"
	if [ "${arch}" = "$(dpkg --print-architecture)" ]; then
		mbdSetDefault ${KEY} "$(hostname -f)"
	fi
	db_input high "mini-buildd-rep/${KEY}" || true

	# Get deb_build_options
	KEY="mbd_deb_build_options_${arch}"
	db_register mini-buildd-rep/mbd_deb_build_options "mini-buildd-rep/${KEY}"
	db_subst "mini-buildd-rep/${KEY}" ARCH "${arch}"
	mbdSetDefault ${KEY} ""
	db_input low "mini-buildd-rep/${KEY}" || true
done

# Note to the user
db_get mini-buildd-rep/mbd_rephost || true
REPHOST="${RET}"
db_get mini-buildd-rep/mbd_httpport || true
HTTPPORT="${RET}"
db_subst "mini-buildd-rep/overview" URL "http://${REPHOST}:${HTTPPORT}/~mini-buildd/"
db_input high "mini-buildd-rep/overview" || true

db_go || true

###########
# OLD -BLD
###########
# @hack: Must be the same as in mbd-common.sh (we cannot include that so that pre-configuration is possible).
MBD_BLDCONFIGFILE="/home/mini-buildd/.mini-buildd-bld.conf"
MBD_BLDCONFIGVARS="mbd_defer mbd_rephttphost mbd_bldhost mbd_lvm_vg"

. /usr/share/debconf/confmodule

# Load config file, if it exists.
if [ -e "${MBD_BLDCONFIGFILE}" ]; then
	. "${MBD_BLDCONFIGFILE}" || true

	# Store values from config back to debconf
	for v in ${MBD_BLDCONFIGVARS}; do
		db_set mini-buildd-bld/${v} "${!v}"
	done
fi

mbdSetDefault()
{
	local key="${1}"
	local default="${2}"

	# Use given value, if we do not find anything else
	local value="${default}"

	if [ -n "${!key}" ]; then
		# Use run time variable
		value="${!key}"
	elif db_get mini-buildd-bld/${key} && [ -n "${RET}" ]; then
		# Use non-empty stored value
		value="${RET}"
	fi
	# Set in debconf and shell
	db_set mini-buildd-bld/${key} "${value}"
	eval "${key}=\"${value}\""
}

# On-The-Fly defaults
mbdSetDefault mbd_defer false
mbdSetDefault mbd_rephttphost "$(hostname -f)"
mbdSetDefault mbd_bldhost "$(hostname -f)"
mbdSetDefault mbd_lvm_vg "auto"


# First, get the repository's host name, and suck our configuration
REPO_PRIO=high
REPO_CONFIGFILE=""
checkRepo()
{
	if [ -z "${REPO_CONFIGFILE}" ]; then
		REPO_CONFIGFILE=$(mktemp -t)
		trap "rm -f ${REPO_CONFIGFILE}" EXIT
	fi

	db_get mini-buildd-bld/mbd_rephttphost || true
	local repo="${RET}"
	local config_url="http://${repo}/~mini-buildd/config"
	if wget --quiet --output-document=- "${config_url}" >"${REPO_CONFIGFILE}"; then
		# Repo valid
		db_subst mini-buildd-bld/mbd_defer STATUS "Repo host \"${repo}\": Config found."
		return 0
	else
		# Current value is invalid: Make sure next time user sees it again.
		db_fset mini-buildd-bld/mbd_defer seen false
		db_fset mini-buildd-bld/mbd_rephttphost seen false
		REPO_PRIO=critical
		db_subst mini-buildd-bld/mbd_defer STATUS "Repo host \"${repo}\": NOT SET UP."
		return 1
	fi
}

while true; do
	checkRepo || true
	db_input ${REPO_PRIO} mini-buildd-bld/mbd_defer || true
	db_go || true
	db_get mini-buildd-bld/mbd_defer || true
	if ${RET}; then
		# Defer; exit script here
		exit 0
	else
		db_input ${REPO_PRIO} mini-buildd-bld/mbd_rephttphost || true
		db_go || true
		if checkRepo; then
			break;
		fi
	fi
done

# At this point, the repo must be valid; go and configure the
# rest using downloaded repo configuration.
. "${REPO_CONFIGFILE}"

# Get "mbd_bldhost"; the hideously exaggerated code is just to
# show the user a convenient choices list of all possible build
# hosts ;).
BLDHOSTS=""
MBD_TMP_SEP=""
for arch in $(echo "${mbd_archs}" | tr -d ","); do
	host="mbd_bldhost_${arch}"
	BLDHOSTS="${BLDHOSTS}${MBD_TMP_SEP}${!host}"
	MBD_TMP_SEP=", "
	if [ -z "${mbd_bldhost}" -a "${!host}" = "$(hostname -f)" ]; then
		# On-the fly default
		db_set mini-buildd-bld/mbd_bldhost "${!host}"
	fi
done
db_subst mini-buildd-bld/mbd_bldhost BLDHOSTS "${BLDHOSTS}"
db_input high mini-buildd-bld/mbd_bldhost || true

# LVM stuff
db_input high mini-buildd-bld/mbd_lvm_vg || true

db_go || true
