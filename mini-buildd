#!/usr/bin/python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import signal
import os
import pwd
import argparse
import sys
import daemon
import logging
import logging.handlers

import mini_buildd.misc
import mini_buildd.setup
import mini_buildd.httpd
import mini_buildd.webapp

LOG = logging.getLogger("mini_buildd")
LOG.addHandler(logging.StreamHandler())


class Main():
    @classmethod
    def _parse_args(cls):
        parser = argparse.ArgumentParser(prog="mini-buildd",
                                         description="mini build daemon.",
                                         formatter_class=argparse.ArgumentDefaultsHelpFormatter)

        parser.add_argument('--version', action='version', version=mini_buildd.__version__)

        parser.add_argument("-f", "--foreground", action='store_true',
                            help="Don't daemonize, log to console.")
        parser.add_argument("-W", "--httpd-bind", action='store', default="0.0.0.0:8066",
                            help="Web Server IP/Hostname and port to bind to.")

        group_log = parser.add_argument_group("Logging")
        group_log.add_argument("-v", "--verbose", dest="verbosity", action='count', default=0,
                               help="Lower log level. Give twice for max logs.")
        group_log.add_argument("-q", "--quiet", dest="terseness", action='count', default=0,
                               help="Tighten log level. Give twice for min logs.")
        group_log.add_argument("-d", "--debug", action='store', default="", metavar="PART,..",
                               help="""\
Comma-separated list of parts to put in 'debug mode'. Available parts:
exception (log tracebacks in master exception handlers),
django (put django app in debug mode),
packager (don't delete spool directories),
builder (don't delete spool directories)""")
        group_log.add_argument("-l", "--loggers", action='store', default="file,syslog",
                               help="Comma-separated list of loggers (file,syslog,console) to use.")

        group_conf = parser.add_argument_group("Daemon configuration")
        group_conf.add_argument("-H", "--home", action='store', default=os.getenv('HOME'),
                                help="Run with this home dir. The only use case to change this for debugging, really.")

        group_db = parser.add_argument_group("Database")
        group_db.add_argument("-P", "--set-admin-password", action='store', metavar="PASSWORD",
                              help="Update password for django superuser named 'admin'; user is created if non-existent yet.")
        group_db.add_argument("-R", "--remove-system-artifacts", action='store_true',
                              help="Internal use only, use with care! Bulk-unprepare all objects that might have produced artifacts on the system.")

        group_db.add_argument("-L", "--loaddata", action='store', metavar="FILE",
                              help="JSON fixture path (see 'django-admin dumpdata'), or an \
absolute path /PATH/*.conf for an old 0.8.x-style config.")
        group_db.add_argument("-D", "--dumpdata", action='store', metavar="APP[.MODEL]",
                              help="Dump app[.MODEL] from django database and exit (see 'django-admin loaddata').")

        args = parser.parse_args()

        # Arguments that imply foreground mode
        if args.set_admin_password or args.loaddata or args.dumpdata:
            args.foreground = True

        return args

    def _setup(self):
        """
        Set global variables that really make no sense to
        propagate through.
        """
        mini_buildd.setup.DEBUG = self._args.debug.split(",")

        mini_buildd.setup.HTTPD_BIND = self._args.httpd_bind

        mini_buildd.setup.HOME_DIR = self._args.home

        mini_buildd.setup.INCOMING_DIR = os.path.join(self._args.home, "incoming")
        mini_buildd.setup.REPOSITORIES_DIR = os.path.join(self._args.home, "repositories")

        vardir = os.path.join(self._args.home, "var")
        mini_buildd.setup.LOG_DIR = os.path.join(vardir, "log")
        mini_buildd.setup.CHROOTS_DIR = os.path.join(vardir, "chroots")
        mini_buildd.setup.CHROOT_LIBDIR = os.path.join("libdir")
        mini_buildd.setup.SPOOL_DIR = os.path.join(vardir, "spool")

        if os.path.exists("./build/sphinx/html"):
            # A bit clumsy, but should work: Seems to be a development run
            mini_buildd.setup.MANUAL_DIR = os.path.realpath("./build/sphinx/html")
        else:
            mini_buildd.setup.MANUAL_DIR = os.path.realpath("/usr/share/doc/mini-buildd/html")

        # Create base directories
        mini_buildd.misc.mkdirs(mini_buildd.setup.INCOMING_DIR)
        mini_buildd.misc.mkdirs(mini_buildd.setup.REPOSITORIES_DIR)
        mini_buildd.misc.mkdirs(mini_buildd.setup.LOG_DIR)

    def _setup_logging(self):
        loggers = self._args.loggers.split(",")
        if self._args.foreground:
            loggers.append("console")

        log_format = "%(name)-29s(%(lineno)03d): %(levelname)-8s: %(message)s"

        # Clear all loggers now; this will remove the
        # preliminary console logger
        LOG.handlers = []

        if "file" in loggers:
            handler = logging.FileHandler(os.path.join(mini_buildd.setup.LOG_DIR, "daemon.log"))
            handler.setFormatter(logging.Formatter("%(asctime)s " + log_format))
            LOG.addHandler(handler)

        if "syslog" in loggers:
            handler = logging.handlers.SysLogHandler(address="/dev/log".encode("UTF-8"), facility=logging.handlers.SysLogHandler.LOG_USER)
            handler.setFormatter(logging.Formatter(log_format))
            LOG.addHandler(handler)

        if "console" in loggers:
            handler = logging.StreamHandler()
            handler.setFormatter(logging.Formatter("%(asctime)s " + log_format))
            LOG.addHandler(handler)

        # Finally, set log level
        loglevel = logging.WARNING - (10 * (min(2, self._args.verbosity) - min(2, self._args.terseness)))
        LOG.setLevel(loglevel)

        # Global: Don't propagate exceptions that happen while logging
        logging.raiseExceptions = 0

    def _setup_environment(self):
        os.environ.clear()
        os.environ["HOME"] = self._args.home
        os.environ["PATH"] = "/usr/bin:/bin:/usr/sbin:/sbin"
        for name in ["USER", "LOGNAME"]:
            os.environ[name] = pwd.getpwuid(os.getuid())[0]

    def __init__(self):
        self._args = self._parse_args()
        # Daemonize early
        if not self._args.foreground:
            daemon.DaemonContext(working_directory=self._args.home, umask=0022).open()
        self._setup()
        self._setup_logging()
        self._setup_environment()

        # Shutdown on SIGTERM or SIGINT
        self._status = "RESTART"
        signal.signal(signal.SIGTERM, self.on_signal)
        signal.signal(signal.SIGINT, self.on_signal)
        signal.signal(signal.SIGHUP, self.on_signal)

    def on_signal(self, signum=-1, frame=-1):
        LOG.info("Got signal: {s} ({f})".format(s=signum, f=frame))
        if signum == signal.SIGTERM or signum == signal.SIGINT:
            self._status = "SHUTDOWN"
        elif signum == signal.SIGHUP:
            self._status = "RESTART"

    def run(self):
        # Get the django project instance
        webapp = mini_buildd.webapp.WebApp()

        # Extra options that exit without running as daemon
        if self._args.set_admin_password:
            webapp.set_admin_password(self._args.set_admin_password)
        elif self._args.remove_system_artifacts:
            webapp.remove_system_artifacts()
        elif self._args.loaddata:
            webapp.loaddata(self._args.loaddata)
        elif self._args.dumpdata:
            webapp.dumpdata(self._args.dumpdata)
        else:
            # Get the daemon manager instance (due to django, import must be here)
            from mini_buildd.daemon import Daemon
            daemon = Daemon()

            # Start httpd webapp
            mini_buildd.misc.run_as_thread(mini_buildd.httpd.run, daemon=False, bind=self._args.httpd_bind, wsgi_app=webapp)

            while True:
                signal.pause()
                if self._status == "RESTART":
                    if daemon.is_running():
                        try:
                            daemon.restart(run_check=True)
                        except Exception as e:
                            mini_buildd.setup.log_exception(LOG, "Could not restart daemon", e)
                    else:
                        LOG.warn("Daemon not active (not restarted).")
                else:
                    break

            daemon.stop()
            mini_buildd.httpd.shutdown()


try:
    Main().run()
except Exception as e:
    mini_buildd.setup.log_exception(LOG, "mini-buildd FAILED", e)
    sys.exit(1)
except SystemExit as e:
    sys.exit(e.code)
