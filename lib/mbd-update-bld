#!/bin/sh -e

. $(dirname $0)/mbd-common.sh
. "${MBD_BLDCONFIGFILE}"

# Update config file; this must be first
if [ ! -e "/etc/init.d/mini-buildd-rep" ]; then
	# -bld w/o -rep only; retrieve config from rephost.
	mbdGetUrl "${MBD_REPCONFIGFILE}" "http://${mbd_rephttphost}/~mini-buildd/config" || true
fi

mbd_opt_init "Mini-buildd: Builder update script."
mbd_opt_parse "$@"
mbdCheckUser mini-buildd

if ${mbd_defer}; then
	${MBD_LOG} -s "W: Configuration deferred, skipping."
	exit 0
fi

cd "${MBD_HOME}"
. "${MBD_REPCONFIGFILE}"

mkdir -p "bld/builds" "bld/chroots"

cat <<EOF >"${MBD_SBUILDCONFIGFILE}"
# Mode "user": Use retval to check if build was successful.
\$sbuild_mode = "user";
# We don't use sbuild-generated log files
\$nolog = 1;
# We always want to update the cache as we generate sources.list on thy fly.
\$apt_update = 1;
# APT-Policy to "1", so we can satisfy dependencies via all sources we added.
\$apt_policy = 1;
# Allow unauthenticated apt toggle; see ~/.mini-buildd/README how to set up keys for extra sources.
\$apt_allow_unauthenticated = $(if ${mbd_apt_allow_unauthenticated}; then echo -n "1"; else echo -n "0"; fi);

# Add path for ccache
\$path = "/usr/lib/ccache:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/usr/games";

# Builder identity
\$mailfrom = "${MBD_AUTOBUILD_MAINTAINER} on $(hostname -f) <${mbd_mail}>";
\$mailto = "${mbd_mail}";
\$maintainer_name='${MBD_AUTOBUILD_MAINTAINER}';
\$pgp_options = "-us -k\"${MBD_GNUPG_KEYNAME}\"";

# don't remove this, Perl needs it:
1;
EOF
${MBD_LOG} -s "I: ${MBD_SBUILDCONFIGFILE} updated."

${MBD_LIB}/mbd-update-common

# Make some items accessible via http
${MBD_LOG} -s "I: $(ln -s -f -v ../bld public_html/ 2>&1)"

mbdUpdateSshKeyring "${mbd_rephost}"

# Update local configuration dir
if [ ! -e "/etc/init.d/mini-buildd-rep" ]; then
	# -bld w/o -rep only; retrieve local config from rephost.
	rm -rf "${MBD_LOCALCONFIG}"
	scp -o StrictHostKeyChecking=no -P ${mbd_sshport} -p -r "${mbd_rephost}:${MBD_LOCALCONFIG}" "${MBD_LOCALCONFIG}"
fi

# Check/prepare chroots for all dists.
for dist in $(mbdD2SList "${mbd_dists}"); do
	for arch in $(mbdD2SList "${mbd_archs}"); do
		# Are we responsible for that arch?
		MBD_TMP_BLDHOST="mbd_bldhost_${arch}"
		if [ "${mbd_bldhost}" = "${!MBD_TMP_BLDHOST}" ]; then
			MBD_TMP_CHROOT="mbd-${dist}-${mbd_id}-${arch}"

			(
				echo "I: Updating chroot ${MBD_TMP_CHROOT}..."
				mbdAptEnv
				for hook in $(find ${MBD_LIB}/chroots-update.d/ -name "*.hook" | sort); do
					if ( echo "set -e" && cat "${hook}" ) | schroot -c "${MBD_TMP_CHROOT}-source" -u root; then
						echo "I: Chroot update hook \"${hook}\" succeeded."
					else
						echo "E: Chroot update hook \"${hook}\" FAILED."
					fi
				done
			) 2>&1 | ${MBD_LOG} -s
		fi
	done
done

exit 0
